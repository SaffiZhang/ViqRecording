type Attachment {
	id: ID!
	description: String!
	url: String!
	updatedDateTime: String!
	updatedBy: String!
	recording: Recording
}

type Bookmark {
	id: ID!
	order: Int!
	dateTime: String!
	speaker: String
	content: String!
	updatedDateTime: String
	updatedBy: String
	recording: Recording
}

input CreateAttachmentInput {
	id: ID!
	description: String!
	url: String!
	updatedDateTime: String!
	updatedBy: String!
	attachmentRecordingId: ID!
}

input CreateBookmarkInput {
	id: ID!
	order: Int!
	dateTime: String!
	speaker: String
	content: String!
	updatedDateTime: String!
	updatedBy: String!
	bookmarkRecordingId: ID!
}

input CreateLogInput {
	id: ID!
	dateTime: String!
	description: String!
	userName: String!
	recordId: String!
	tableName: String!
	logRecordingId: ID!
}

input CreateRecordingInput {
	id: ID
	interviewee: String!
	interviewFinish: String!
	interviewStart: String!
	officerCollarNumber: String!
	location: String!
	unitId: String!
	path:String!
}

input CreateRedactionInput {
	id: ID!
	redactionVersion: String!
	description: String!
	updatedDateTime: String!
	updatedBy: String!
	status: String!
	redactionUrlId: ID!
}

input CreateRedactionIntervalInput {
	id: ID!
	redactionVersion: String!
	startSecond: Int!
	endSecond: Int!
	type: String!
	redactionIntervalRedationId: ID!
}

input CreateSharedInput {
	id: ID!
	createdDateTime: String!
	createdBy: String!
	receiver: String!
	receiver_email: String!
	receiver_type: String!
	expiry_date: String!
	token: String!
	urls: [String]!
	status: String!
	description: String
	sharedRecordingId: ID!
}

input CreateTranscriptionInput {
	id: ID
	submitTime: String!
	transcriptionFileUrl: String
	status: String!
	transcriptionRecordingId: ID!
}

input CreateUrlInput {
	id: ID!
	url: String!
	lastmodified: String!
	description: String!
	camera: String!
	version: String!
	urlRecordingId: ID!
}

input DeleteAttachmentInput {
	id: ID
}

input DeleteBookmarkInput {
	id: ID
}

input DeleteLogInput {
	id: ID
}

input DeleteRecordingInput {
	id: ID
}

input DeleteRedactionInput {
	id: ID
}

input DeleteRedactionIntervalInput {
	id: ID
}

input DeleteSharedInput {
	id: ID
}

input DeleteTranscriptionInput {
	id: ID
}

input DeleteUrlInput {
	id: ID
}

type Log {
	id: ID!
	dateTime: String!
	description: String!
	userName: String!
	recordId: String!
	tableName: String!
	recording: Recording
}

type ModelAttachmentConnection {
	items: [Attachment]
	nextToken: String
}

input ModelAttachmentFilterInput {
	id: ModelIDFilterInput
	description: ModelStringFilterInput
	url: ModelStringFilterInput
	attachmentRecordingId: ModelStringFilterInput
	and: [ModelAttachmentFilterInput]
	or: [ModelAttachmentFilterInput]
	not: ModelAttachmentFilterInput
}

type ModelBookmarkConnection {
	items: [Bookmark]
	nextToken: String
}

input ModelBookmarkFilterInput {
	id: ModelIDFilterInput
	dateTime: ModelStringFilterInput
	speaker: ModelStringFilterInput
	content: ModelStringFilterInput
	updatedDateTime: ModelStringFilterInput
	updatedBy: ModelStringFilterInput
	bookmarkRecordingId: ModelStringFilterInput
	and: [ModelBookmarkFilterInput]
	or: [ModelBookmarkFilterInput]
	not: ModelBookmarkFilterInput
}

input ModelBooleanFilterInput {
	ne: Boolean
	eq: Boolean
}

input ModelFloatFilterInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	contains: Float
	notContains: Float
	between: [Float]
}

input ModelIDFilterInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
}

input ModelIntFilterInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	contains: Int
	notContains: Int
	between: [Int]
}

type ModelLogConnection {
	items: [Log]
	nextToken: String
}

input ModelLogFilterInput {
	id: ModelIDFilterInput
	dateTime: ModelStringFilterInput
	description: ModelStringFilterInput
	userName: ModelStringFilterInput
	logRecordingId: ModelStringFilterInput
	and: [ModelLogFilterInput]
	or: [ModelLogFilterInput]
	not: ModelLogFilterInput
}

type ModelRecordingConnection {
	items: [Recording]
	nextToken: String
}

input ModelRecordingFilterInput {
	id: ModelStringFilterInput
	interviewee: ModelStringFilterInput
	interviewFinish: ModelStringFilterInput
	interviewStart: ModelStringFilterInput
	officerCollarNumber: ModelStringFilterInput
	location: ModelStringFilterInput
	unitId: ModelStringFilterInput
	and: [ModelRecordingFilterInput]
	or: [ModelRecordingFilterInput]
	not: ModelRecordingFilterInput
}

type ModelRedactionConnection {
	items: [Redaction]
	nextToken: String
}

input ModelRedactionFilterInput {
	id: ModelIDFilterInput
	redactionVersion: ModelStringFilterInput
	urlId: ModelStringFilterInput
	and: [ModelRedactionFilterInput]
	or: [ModelRedactionFilterInput]
	not: ModelRedactionFilterInput
}

type ModelRedactionIntervalConnection {
	items: [RedactionInterval]
	nextToken: String
}

input ModelRedactionIntervalFilterInput {
	id: ModelIDFilterInput
	redactionId: ModelStringFilterInput
	and: [ModelRedactionIntervalFilterInput]
	or: [ModelRedactionIntervalFilterInput]
	not: ModelRedactionIntervalFilterInput
}

type ModelSharedConnection {
	items: [Shared]
	nextToken: String
}

input ModelSharedFilterInput {
	id: ModelIDFilterInput
	dateTime: ModelStringFilterInput
	receiver: ModelStringFilterInput
	receiver_email: ModelStringFilterInput
	receiver_type: ModelStringFilterInput
	token: ModelStringFilterInput
	urls: ModelStringFilterInput
	expiry_date: ModelStringFilterInput
	createdDateTime: ModelStringFilterInput
	createdBy: ModelStringFilterInput
	status: ModelStringFilterInput
	sharedRecordingId: ModelStringFilterInput
	and: [ModelSharedFilterInput]
	or: [ModelSharedFilterInput]
	not: ModelSharedFilterInput
}

enum ModelSortDirection {
	ASC
	DESC
}

input ModelStringFilterInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
}

type ModelTranscriptionConnection {
	items: [Transcription]
	nextToken: String
}

input ModelTranscriptionFilterInput {
	id: ModelIDFilterInput
	submitTime: ModelStringFilterInput
	transcriptionRecordingId: ModelStringFilterInput
	and: [ModelTranscriptionFilterInput]
	or: [ModelTranscriptionFilterInput]
	not: ModelTranscriptionFilterInput
}

type ModelUrlConnection {
	items: [Url]
	nextToken: String
}

input ModelUrlFilterInput {
	id: ModelIDFilterInput
	url: ModelStringFilterInput
	lastmodified: ModelStringFilterInput
	description: ModelStringFilterInput
	camera: ModelStringFilterInput
	version: ModelStringFilterInput
	urlRecordingId: ModelStringFilterInput
	and: [ModelUrlFilterInput]
	or: [ModelUrlFilterInput]
	not: ModelUrlFilterInput
}

type Mutation {
	createRecording(input: CreateRecordingInput!): Recording
	updateRecording(input: UpdateRecordingInput!): Recording
	deleteRecordiing(input: DeleteRecordingInput!): Recording
	createAttachment(input: CreateAttachmentInput!): Attachment
	updateAttachment(input: UpdateAttachmentInput!): Attachment
	deleteAttachment(input: DeleteAttachmentInput!): Attachment
	createUrl(input: CreateUrlInput!): Url
	updateUrl(input: UpdateUrlInput!): Url
	deleteUrl(input: DeleteUrlInput!): Url
	createLog(input: CreateLogInput!): Log
	updateLog(input: UpdateLogInput!): Log
	deleteLog(input: DeleteLogInput!): Log
	createRedaction(input: CreateRedactionInput!): Redaction
	updateRedaction(input: UpdateRedactionInput!): Redaction
	deleteRedaction(input: DeleteRedactionInput!): Redaction
	createRedactionInterval(input: CreateRedactionIntervalInput!): RedactionInterval
	updateRedactionInterval(input: UpdateRedactionIntervalInput!): RedactionInterval
	deleteRedactionInterval(input: DeleteRedactionIntervalInput!): RedactionInterval
	createBookmark(input: CreateBookmarkInput!): Bookmark
	updateBookmark(input: UpdateBookmarkInput!): Bookmark
	deleteBookmark(input: DeleteBookmarkInput!): Bookmark
	createTranscription(input: CreateTranscriptionInput!): Transcription
	updateTranscription(input: UpdateTranscriptionInput!): Transcription
	deleteTranscription(input: DeleteTranscriptionInput!): Transcription
	createShared(input: CreateSharedInput!): Shared
	updateShared(input: UpdateSharedInput!): Shared
	deleteShared(input: DeleteSharedInput!): Shared
}

type Query {
	getRecording(id: ID!): Recording
	listRecordings(filter: ModelRecordingFilterInput, limit: Int, nextToken: String): ModelRecordingConnection
	getAttachment(id: ID!): Attachment
	listAttachments(filter: ModelAttachmentFilterInput, limit: Int, nextToken: String): ModelAttachmentConnection
	getUrl(id: ID!): Url
	listUrls(filter: ModelUrlFilterInput, limit: Int, nextToken: String): ModelUrlConnection
	getLog(id: ID!): Log
	listLogs(filter: ModelLogFilterInput, limit: Int, nextToken: String): ModelLogConnection
	getRedaction(id: ID!): Redaction
	listRedactions(filter: ModelRedactionFilterInput, limit: Int, nextToken: String): ModelRedactionConnection
	getRedactionInterval(id: ID!): RedactionInterval
	listRedactionsInterval(filter: ModelRedactionIntervalFilterInput, limit: Int, nextToken: String): ModelRedactionIntervalConnection
	getBookmark(id: ID!): Bookmark
	listBookmark(filter: ModelBookmarkFilterInput, limit: Int, nextToken: String): ModelBookmarkConnection
	getTranscription(id: ID!): Transcription
	listTranscriptions(filter: ModelTranscriptionFilterInput, limit: Int, nextToken: String): ModelTranscriptionConnection
	getShared(id: ID!): Shared
	listShareds(filter: ModelSharedFilterInput, limit: Int, nextToken: String): ModelSharedConnection
}

type Recording {
	id: String!
	interviewee: String!
	interviewFinish: String!
	interviewStart: String!
	officerCollarNumber: String!
	location: String!
	unitId: String!
	attachments(
		filter: ModelAttachmentFilterInput,
		sortDirection: ModelSortDirection,
		limit: Int,
		nextToken: String
	): ModelAttachmentConnection
	urls(
		filter: ModelUrlFilterInput,
		sortDirection: ModelSortDirection,
		limit: Int,
		nextToken: String
	): ModelUrlConnection
	logs(
		filter: ModelLogFilterInput,
		sortDirection: ModelSortDirection,
		limit: Int,
		nextToken: String
	): ModelLogConnection
	transcriptions(
		filter: ModelTranscriptionFilterInput,
		sortDirection: ModelSortDirection,
		limit: Int,
		nextToken: String
	): ModelTranscriptionConnection
	bookmarks(
		filter: ModelBookmarkFilterInput,
		sortDirection: ModelSortDirection,
		limit: Int,
		nextToken: String
	): ModelBookmarkConnection
	shareds(
		filter: ModelSharedFilterInput,
		sortDirection: ModelSortDirection,
		limit: Int,
		nextToken: String
	): ModelSharedConnection
}

type Redaction {
	id: ID!
	redactionVersion: String!
	description: String!
	updatedDateTime: String
	updatedBy: String
	status: String!
	url: Url
	intervals(
		filter: ModelRedactionIntervalFilterInput,
		sortDirection: ModelSortDirection,
		limit: Int,
		nextToken: String
	): ModelRedactionIntervalConnection
}

type RedactionInterval {
	id: ID!
	redactionVersion: String!
	startSecond: Int!
	endSecond: Int!
	type: String!
	redacton: Redaction
}

type Shared {
	id: ID!
	createdDateTime: String!
	createdBy: String!
	receiver: String!
	receiver_email: String!
	receiver_type: String!
	expiry_date: String!
	token: String!
	urls: [String]!
	status: String!
	description: String!
	recording: Recording
}

type Transcription {
	id: ID!
	submitTime: String!
	transcriptionFileUrl: String!
	status: String!
	recording: Recording
}

input UpdateAttachmentInput {
	id: ID!
	description: String
	url: String
	updatedDateTime: String
	updatedBy: String
	attachmentRecordingId: ID
}

input UpdateBookmarkInput {
	id: ID!
	order: Int
	dateTime: String
	speaker: String
	content: String
	updatedDateTime: String
	updatedBy: String
	bookmarkRecordingId: ID
}

input UpdateLogInput {
	id: ID!
	dateTime: String
	description: String
	userName: String
	recordId: String
	tableName: String
	logRecordingId: ID
}

input UpdateRecordingInput {
	id: String!
	interviewee: String
	interviewFinish: String
	interviewStart: String
	officerCollarNumber: String
	location: String
	unitId: String
	path:String
}

input UpdateRedactionInput {
	id: ID!
	redactionVersion: String
	description: String
	updatedDateTime: String
	updatedBy: String
	status: String
	redactionUrlId: ID
}

input UpdateRedactionIntervalInput {
	id: ID!
	redactionVersion: String
	startSecond: Int
	endSecond: Int
	type: String
	redactionIntervalRedactionId: ID
}

input UpdateSharedInput {
	id: ID!
	dateTime: String
	receiver: String
	receiver_email: String
	receiver_type: String
	expiry_date: String
	token: String
	urls: [String]
	status: String
	sharedRecordingId: ID
}

input UpdateTranscriptionInput {
	id: ID!
	submitTime: String
	transcriptionFileUrl: String
	status: String
	transcriptionRecordingId: ID
}

input UpdateUrlInput {
	id: ID!
	url: String
	lastmodified: String
	description: String
	camera: String
	version: String
	urlRecordingId: ID
}

type Url {
	id: ID!
	url: String!
	lastmodified: String!
	description: String!
	camera: String!
	version: String!
	redactions(
		filter: ModelRedactionFilterInput,
		sortDirection: ModelSortDirection,
		limit: Int,
		nextToken: String
	): ModelRedactionConnection
	recording: Recording
}